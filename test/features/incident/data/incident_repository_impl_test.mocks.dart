// Mocks generated by Mockito 5.4.4 from annotations
// in disaster_safety/test/features/incident/data/incident_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:disaster_safety/features/maps/data/datasource/incident_datasource.dart'
    as _i2;
import 'package:disaster_safety/features/maps/data/datasource/maps_datasource.dart'
    as _i7;
import 'package:disaster_safety/features/maps/data/models/incident_model.dart'
    as _i6;
import 'package:disaster_safety/features/maps/DTO/register_incident_DTO.dart'
    as _i4;
import 'package:disaster_safety/models/map_enums.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IncidentDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIncidentDatasource extends _i1.Mock
    implements _i2.IncidentDatasource {
  MockIncidentDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> createIncident({required _i4.RegisterIncidentDTO? dto}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createIncident,
          [],
          {#dto: dto},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> verifyNearbyIncidentAlreadyExists({
    required _i5.IncidentType? incidentType,
    required double? longitude,
    required double? latitude,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyNearbyIncidentAlreadyExists,
          [],
          {
            #incidentType: incidentType,
            #longitude: longitude,
            #latitude: latitude,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> confirmIncident({
    required String? userId,
    required String? incidentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #confirmIncident,
          [],
          {
            #userId: userId,
            #incidentId: incidentId,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> closeIncident({required String? incidentId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #closeIncident,
          [],
          {#incidentId: incidentId},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i6.IncidentModel>> getNearbyIncidents({
    required double? longitude,
    required double? latitude,
    required double? radius,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNearbyIncidents,
          [],
          {
            #longitude: longitude,
            #latitude: latitude,
            #radius: radius,
          },
        ),
        returnValue:
            _i3.Future<List<_i6.IncidentModel>>.value(<_i6.IncidentModel>[]),
      ) as _i3.Future<List<_i6.IncidentModel>>);

  @override
  _i3.Future<List<_i6.IncidentModel>> getIncidentsForState(
          {required String? state}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIncidentsForState,
          [],
          {#state: state},
        ),
        returnValue:
            _i3.Future<List<_i6.IncidentModel>>.value(<_i6.IncidentModel>[]),
      ) as _i3.Future<List<_i6.IncidentModel>>);

  @override
  _i3.Future<List<_i6.IncidentModel>> getPendingIncidentsForState(
          {required String? state}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPendingIncidentsForState,
          [],
          {#state: state},
        ),
        returnValue:
            _i3.Future<List<_i6.IncidentModel>>.value(<_i6.IncidentModel>[]),
      ) as _i3.Future<List<_i6.IncidentModel>>);

  @override
  _i3.Future<List<_i6.IncidentModel>> getAllPendingIncidents() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllPendingIncidents,
          [],
        ),
        returnValue:
            _i3.Future<List<_i6.IncidentModel>>.value(<_i6.IncidentModel>[]),
      ) as _i3.Future<List<_i6.IncidentModel>>);
}

/// A class which mocks [MapsDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapsDatasource extends _i1.Mock implements _i7.MapsDatasource {
  MockMapsDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> getState({
    required double? longitude,
    required double? latitude,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getState,
          [],
          {
            #longitude: longitude,
            #latitude: latitude,
          },
        ),
        returnValue: _i3.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #getState,
            [],
            {
              #longitude: longitude,
              #latitude: latitude,
            },
          ),
        )),
      ) as _i3.Future<String>);
}
